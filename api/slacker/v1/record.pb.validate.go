// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: api/slacker/v1/record.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on BeginRecordRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *BeginRecordRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BeginRecordRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// BeginRecordRequestMultiError, or nil if none found.
func (m *BeginRecordRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *BeginRecordRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Type

	if len(errors) > 0 {
		return BeginRecordRequestMultiError(errors)
	}

	return nil
}

// BeginRecordRequestMultiError is an error wrapping multiple validation errors
// returned by BeginRecordRequest.ValidateAll() if the designated constraints
// aren't met.
type BeginRecordRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BeginRecordRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BeginRecordRequestMultiError) AllErrors() []error { return m }

// BeginRecordRequestValidationError is the validation error returned by
// BeginRecordRequest.Validate if the designated constraints aren't met.
type BeginRecordRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BeginRecordRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BeginRecordRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BeginRecordRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BeginRecordRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BeginRecordRequestValidationError) ErrorName() string {
	return "BeginRecordRequestValidationError"
}

// Error satisfies the builtin error interface
func (e BeginRecordRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBeginRecordRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BeginRecordRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BeginRecordRequestValidationError{}

// Validate checks the field values on BeginRecordReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *BeginRecordReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BeginRecordReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// BeginRecordReplyMultiError, or nil if none found.
func (m *BeginRecordReply) ValidateAll() error {
	return m.validate(true)
}

func (m *BeginRecordReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Type

	if all {
		switch v := interface{}(m.GetBeginTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, BeginRecordReplyValidationError{
					field:  "BeginTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, BeginRecordReplyValidationError{
					field:  "BeginTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetBeginTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return BeginRecordReplyValidationError{
				field:  "BeginTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return BeginRecordReplyMultiError(errors)
	}

	return nil
}

// BeginRecordReplyMultiError is an error wrapping multiple validation errors
// returned by BeginRecordReply.ValidateAll() if the designated constraints
// aren't met.
type BeginRecordReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BeginRecordReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BeginRecordReplyMultiError) AllErrors() []error { return m }

// BeginRecordReplyValidationError is the validation error returned by
// BeginRecordReply.Validate if the designated constraints aren't met.
type BeginRecordReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BeginRecordReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BeginRecordReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BeginRecordReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BeginRecordReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BeginRecordReplyValidationError) ErrorName() string { return "BeginRecordReplyValidationError" }

// Error satisfies the builtin error interface
func (e BeginRecordReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBeginRecordReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BeginRecordReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BeginRecordReplyValidationError{}

// Validate checks the field values on EndRecordRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *EndRecordRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on EndRecordRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// EndRecordRequestMultiError, or nil if none found.
func (m *EndRecordRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *EndRecordRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return EndRecordRequestMultiError(errors)
	}

	return nil
}

// EndRecordRequestMultiError is an error wrapping multiple validation errors
// returned by EndRecordRequest.ValidateAll() if the designated constraints
// aren't met.
type EndRecordRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EndRecordRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EndRecordRequestMultiError) AllErrors() []error { return m }

// EndRecordRequestValidationError is the validation error returned by
// EndRecordRequest.Validate if the designated constraints aren't met.
type EndRecordRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EndRecordRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EndRecordRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EndRecordRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EndRecordRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EndRecordRequestValidationError) ErrorName() string { return "EndRecordRequestValidationError" }

// Error satisfies the builtin error interface
func (e EndRecordRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEndRecordRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EndRecordRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EndRecordRequestValidationError{}

// Validate checks the field values on EndRecordReply with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *EndRecordReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on EndRecordReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in EndRecordReplyMultiError,
// or nil if none found.
func (m *EndRecordReply) ValidateAll() error {
	return m.validate(true)
}

func (m *EndRecordReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Type

	if all {
		switch v := interface{}(m.GetBeginTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, EndRecordReplyValidationError{
					field:  "BeginTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, EndRecordReplyValidationError{
					field:  "BeginTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetBeginTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return EndRecordReplyValidationError{
				field:  "BeginTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetEndTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, EndRecordReplyValidationError{
					field:  "EndTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, EndRecordReplyValidationError{
					field:  "EndTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetEndTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return EndRecordReplyValidationError{
				field:  "EndTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return EndRecordReplyMultiError(errors)
	}

	return nil
}

// EndRecordReplyMultiError is an error wrapping multiple validation errors
// returned by EndRecordReply.ValidateAll() if the designated constraints
// aren't met.
type EndRecordReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EndRecordReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EndRecordReplyMultiError) AllErrors() []error { return m }

// EndRecordReplyValidationError is the validation error returned by
// EndRecordReply.Validate if the designated constraints aren't met.
type EndRecordReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EndRecordReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EndRecordReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EndRecordReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EndRecordReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EndRecordReplyValidationError) ErrorName() string { return "EndRecordReplyValidationError" }

// Error satisfies the builtin error interface
func (e EndRecordReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEndRecordReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EndRecordReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EndRecordReplyValidationError{}
