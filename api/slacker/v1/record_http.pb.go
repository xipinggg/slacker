// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.7.0
// - protoc             v4.24.0--rc2
// source: api/slacker/v1/record.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationRecordBeginRecord = "/api.slacker.v1.Record/BeginRecord"
const OperationRecordEndRecord = "/api.slacker.v1.Record/EndRecord"

type RecordHTTPServer interface {
	BeginRecord(context.Context, *BeginRecordRequest) (*BeginRecordReply, error)
	EndRecord(context.Context, *EndRecordRequest) (*EndRecordReply, error)
}

func RegisterRecordHTTPServer(s *http.Server, srv RecordHTTPServer) {
	r := s.Route("/")
	r.POST("/v1/record", _Record_BeginRecord0_HTTP_Handler(srv))
	r.POST("/v1/record/{id}", _Record_EndRecord0_HTTP_Handler(srv))
}

func _Record_BeginRecord0_HTTP_Handler(srv RecordHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in BeginRecordRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationRecordBeginRecord)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.BeginRecord(ctx, req.(*BeginRecordRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*BeginRecordReply)
		return ctx.Result(200, reply)
	}
}

func _Record_EndRecord0_HTTP_Handler(srv RecordHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in EndRecordRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationRecordEndRecord)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.EndRecord(ctx, req.(*EndRecordRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*EndRecordReply)
		return ctx.Result(200, reply)
	}
}

type RecordHTTPClient interface {
	BeginRecord(ctx context.Context, req *BeginRecordRequest, opts ...http.CallOption) (rsp *BeginRecordReply, err error)
	EndRecord(ctx context.Context, req *EndRecordRequest, opts ...http.CallOption) (rsp *EndRecordReply, err error)
}

type RecordHTTPClientImpl struct {
	cc *http.Client
}

func NewRecordHTTPClient(client *http.Client) RecordHTTPClient {
	return &RecordHTTPClientImpl{client}
}

func (c *RecordHTTPClientImpl) BeginRecord(ctx context.Context, in *BeginRecordRequest, opts ...http.CallOption) (*BeginRecordReply, error) {
	var out BeginRecordReply
	pattern := "/v1/record"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationRecordBeginRecord))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *RecordHTTPClientImpl) EndRecord(ctx context.Context, in *EndRecordRequest, opts ...http.CallOption) (*EndRecordReply, error) {
	var out EndRecordReply
	pattern := "/v1/record/{id}"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationRecordEndRecord))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
